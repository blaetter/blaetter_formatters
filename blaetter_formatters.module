<?php
/**
 * @file
 * Contains blaetter_formatters.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_help()
 *
 * @param string              $route_name  The name of the route
 * @param RouteMatchInterface $route_match The route match interface object
 *
 * @see hook_help()
 * )
 * @return void
 */
function blaetter_formatters_help(string $route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        // Main module help for the nodeshop module.
        case 'help.page.blaetter_formatters':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t(
                'This module adds formatters to Drupal fields. Currently there are the following formatters:'
            ) . '</p>';
            $output .= '<ul>';
            $output .= '<li>' . t(
              '<strong>Bl√§tter inline formatter</strong>: This formatter takes entity references and displays their ' .
              'values inline with a configurable seperator. You can also specify an optional prefix and decide, if ' .
              'values should be linked to its entity pages or not.'
            ) . '</li>';
            $output .= '</ul>';
            return $output;
        default:
    }
}

/**
 * Implements hook_theme()
 *
 * @see hook_theme()
 *
 * @return void
 */
function blaetter_formatters_theme()
{
    return [
      'blaetter_embed_block' => [
        'template'  => 'blaetter_embed_block',
        'variables' => [
          'embed'         => [],
        ]
      ],
      'blaetter_formatters_inline' => [
        'template'  => 'blaetter_formatters_inline',
        'variables' => [
          'entities'      => [],
          'separator'     => '',
          'prefix'        => '',
        ]
        ],
      'blaetter_formatters_issue' => [
        'template' => 'blaetter_formatters_issue',
        'variables' => [
          'book_id' => '',
          'edition' => '',
          'year' => '',
          'display_pages' => '',
          'page_from'     => '',
          'page_to'       => '',
          'issue_prefix'        => ''
        ]
      ],
      'blaetter_grid_block' => [
        'template' => 'blaetter_grid_block',
        'variables' => [
          'grid_class_left' => '',
          'grid_class_right' => '',
          'title' => '',
          'title_left' => '',
          'content_left' => '',
          'title_right' => '',
          'content_right' => '',
        ]
      ],
      'blaetter_grid_block_title' => [
        'template' => 'blaetter_grid_block_title',
        'variables' => [
          'title' => '',
        ]
      ]
    ];
}

/**
 * Set dynamic allowed values for the provider field of the media type oembed.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function blaaetter_formatters_allowed_media_providers(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [];
  if (null !== $entity && 'generic_iframe' == $entity->bundle()) {
    $options = [
      'Detektor.fm' => 'Detektor.fm',
      'Google Maps' => 'Google Maps',
    ];
  } elseif (null !== $entity && 'remote_video' == $entity->bundle()) {
    $options = [
      'YouTube' => 'YouTube',
      'Vimeo' => 'Vimeo',
    ];
  }
  return $options;
}
